AWSTemplateFormatVersion: '2010-09-09'
Description: 'Setup a Dremio cluster.'
Parameters:
  keyName:
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
    ConstraintDescription: Must select an existing EC2 KeyPair
    Description: "AWS key pair to use to SSH to the VMs. SSH username for the VMs is ec2-user (has sudo privilege). SSH into machines for changing configuration, reviewing logs, etc."
  clusterSize:
    Type: String
    Description: "The type and number of machines are chosen based on the size selected."
    AllowedValues:
      - "X-Small--1-executor"
      - "Small--5-executors"
      - "Medium--10-executors"
      - "Large--25-executors"
      - "X-Large--50-executors"
    Default: "Small--5-executors"
  useVPC:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to deploy the cluster into."
    Default: ""
  useSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to deploy the cluster into. Must be in the selected VPC."
    Default: ""
  dremioDownloadURL:
    Type: String
    Description: "(Optional) HTTP or HTTPS URL to a Dremio RPM. Leave empty to install the latest Dremio CE release."
    Default: ""
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Dremio Cluster
        Parameters:
          - clusterSize
          - useVPC
          - useSubnet
          - dremioDownloadURL
      -
        Label:
          default: AWS resource configuration
        Parameters:
          - keyName
    ParameterLabels:
      keyName:
        default: "AWS keypair"
      clusterSize:
        default: "Cluster size"
      useSubnet:
        default: "Deploy to Subnet"
      useVPC:
        default: "Deploy to VPC"
      dremioDownloadURL:
        default: "Dremio download URL"
Mappings:
  Custom:
    Variables:
      URL: https://download.dremio.com/community-server/dremio-community-LATEST.noarch.rpm
  ClusterSizes:
    X-Small--1-executor:
      coordinatorInstanceType: m5.2xlarge
      coordinatorDiskSize: 10
      coordinatorMaxMemory: 28672
      executorInstanceType: r5d.4xlarge
      executorCount: 1
      executorDiskSize: 10
      executorMaxMemory: 122880
    Small--5-executors:
      coordinatorInstanceType: m5.2xlarge
      coordinatorDiskSize: 50
      coordinatorMaxMemory: 28672
      executorInstanceType: r5d.4xlarge
      executorCount: 5
      executorDiskSize: 50
      executorMaxMemory: 122880
    Medium--10-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 10
      executorDiskSize: 100
      executorMaxMemory: 122880
    Large--25-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 25
      executorDiskSize: 100
      executorMaxMemory: 122880
    X-Large--50-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 50
      executorDiskSize: 100
      executorMaxMemory: 122880
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316
    us-east-2:
      AMI: ami-0dd9f0e7df0f0a138
    us-west-1:
      AMI: ami-0649b28e6c9beab0d
    us-west-2:
      AMI: ami-0a887e401f7654935
    ca-central-1:
      AMI: ami-0d5d9d301c853a04a
    eu-central-1:
      AMI: ami-0323c3dd2da7fb37d
    eu-west-1:
      AMI: ami-02e136e904f3da870
    eu-west-2:
      AMI: ami-0ed9277fb7eb570c9
    eu-north-1:
      AMI: ami-0eb1f3cdeeb8eed2a
    ap-southeast-1:
      AMI: ami-08569b978cc4dfa10
    ap-southeast-2:
      AMI: ami-09b42976632b27e9b
    ap-south-1:
      AMI: ami-0912f71e06545ad88
    ap-northeast-1:
      AMI: ami-06cd52961ce9f0d85
    ap-northeast-2:
      AMI: ami-0a10b2721688ce9d2
    sa-east-1:
      AMI: ami-07b14488da8ea02a0
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
Conditions:
  CreateVPC: !Equals [!Ref useSubnet, ""]
Resources:
  VPC:
    Condition: CreateVPC
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "net"]]
  PublicSubnet:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, Public, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]
      - Key: Network
        Value: Public
  InternetGateway:
    Condition: CreateVPC
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "ig"]]
  VPCGatewayAttachment:
    Condition: CreateVPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Condition: CreateVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]
  PublicSubnetRouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicRoute:
    Condition: CreateVPC
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  DremioSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Dremio Access"
      VpcId: !If [CreateVPC, !Ref VPC, !Ref useVPC]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9047'
        ToPort: '9047'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '31010'
        ToPort: '31010'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  AvailabilityWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  AvailabilityWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DremioMaster
    Properties:
      Handle: !Ref "AvailabilityWaitHandle"
      Timeout: "600"
  DremioSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DremioSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref DremioSecurityGroup
  DremioMaster:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "DremioMaster"]]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref keyName
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorInstanceType]
      NetworkInterfaces:
        - DeleteOnTermination: "true"
          AssociatePublicIpAddress: "true"
          DeviceIndex: 0
          SubnetId: !If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]
          GroupSet: [!Ref DremioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            statusFile=/tmp/statusfile

            if [ ! -d /opt/dremio ]; then
              url=${dremioDownloadURL}
              [ -z $url ] && url=${DOWNLOAD_URL}
              yum -y install java-11-openjdk-devel
              yum -y install $url
              if [ $? != 0 ]; then
                echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"Unable to download Dremio\" }" > $statusFile
                curl -T $statusFile '${AvailabilityWaitHandle}'
                exit 1
              fi
            fi

            DREMIO_HOME=/opt/dremio
            DREMIO_CONFIG_FILE=/etc/dremio/dremio.conf
            DREMIO_ENV_FILE=/etc/dremio/dremio-env

            sed -i -e "s/executor.enabled: true/executor.enabled: false/" \
                $DREMIO_CONFIG_FILE
            sed -i -e "s/#DREMIO_MAX_MEMORY_SIZE_MB=/DREMIO_MAX_MEMORY_SIZE_MB=${MEMORY_SIZE}/" \
                $DREMIO_ENV_FILE

            cp $DREMIO_HOME/share/dremio/dremio.service /etc/systemd/system
            systemctl daemon-reload
            systemctl start dremio
            systemctl enable dremio

            until curl -Iks http://localhost:9047; do
              echo waiting for website availability
              sleep 2
            done
            echo "{ \"Status\" : \"SUCCESS\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Ready\", \"Reason\" : \"Website Available\" }" > $statusFile
            curl -T $statusFile '${AvailabilityWaitHandle}'
          - DOWNLOAD_URL: !FindInMap [ Custom, Variables, "URL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorMaxMemory]
  DremioExecutorLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DremioMaster
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AMI]
      InstanceMonitoring: true
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, executorInstanceType]
      KeyName: !Ref keyName
      SecurityGroups: [!Ref DremioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x

            if [ ! -d /opt/dremio ]; then
              url=${dremioDownloadURL}
              [ -z $url ] && url=${DOWNLOAD_URL}
              yum -y install java-11-openjdk-devel
              yum -y install $url
            fi

            DREMIO_HOME=/opt/dremio
            DREMIO_CONFIG_FILE=/etc/dremio/dremio.conf
            DREMIO_ENV_FILE=/etc/dremio/dremio-env

            sed -i -e "s/coordinator.master.enabled: true/coordinator.master.enabled: false/" \
                -e "s/coordinator.enabled: true/coordinator.enabled: false/" \
                $DREMIO_CONFIG_FILE
            sed -i -e "s/#DREMIO_MAX_MEMORY_SIZE_MB=/DREMIO_MAX_MEMORY_SIZE_MB=${MEMORY_SIZE}/" \
                $DREMIO_ENV_FILE
            cat <<EOF >> $DREMIO_CONFIG_FILE
            zookeeper: "${ZK}:2181"
            EOF

            cp $DREMIO_HOME/share/dremio/dremio.service /etc/systemd/system
            systemctl daemon-reload
            systemctl start dremio
            systemctl enable dremio
          - ZK: !GetAtt DremioMaster.PrivateIp
            DOWNLOAD_URL: !FindInMap [ Custom, Variables, "URL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, executorMaxMemory]
  DremioExecutorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: DremioExecutorLC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", DremioExecutor]]
          PropagateAtLaunch: true
      LaunchConfigurationName: !Ref DremioExecutorLC
      VPCZoneIdentifier: [!If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]]
      DesiredCapacity: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]
      MaxSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]
      MinSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]
Outputs:
  DremioUI:
    Description: Dremio UI.
    Value: !Join [ "", ["http://", !GetAtt DremioMaster.PublicIp, ":9047"]]
